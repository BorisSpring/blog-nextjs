generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GUEST
}

model User {
  id        String  @id @default(uuid())
  clerkId   String  @unique
  firstName String  @db.Text
  lastName  String  @db.Text
  email     String  @db.Text
  enabled   Boolean @db.TinyInt
  role      Role    @default(GUEST)

  comments Comment[]
  blogs    Blog[]
  replies  Replies[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clerkId])
}

model Tag {
  id    Int        @id @default(autoincrement())
  name  String     @db.VarChar(20)
  blogs BlogTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id          Int    @id @default(autoincrement())
  title       String @db.VarChar(255)
  description String @db.Text
  body        String @db.Text
  views       Int    @default(0)

  tags BlogTags[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]

  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
  @@index([userId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)

  blogs Blog[]
}

model BlogTags {
  blogId Int
  tagId  Int

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([blogId, tagId])
}

model Comment {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  isEdited Boolean @db.TinyInt
  content  String  @db.Text

  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  replies Replies[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Replies {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  isEdited Boolean @db.TinyInt
  content  String  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscribers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @db.VarChar(50)
}
